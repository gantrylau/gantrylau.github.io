{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"","date":"2019-01-31T15:37:29.075Z","updated":"2019-01-31T15:37:29.075Z","comments":true,"path":"reg/index.html","permalink":"http://yoursite.com/reg/index.html","excerpt":"","text":"GantryLau-在线正则测试工具 tweetmeme_url = 'regexp/'; tweetmeme_style = 'compact'; digg_skin = 'compact'; digg_window = 'new'; Regular Expression //g g - 全局 i - 忽略大小写 m - 允许多行匹配 Input Text please click here and input something to test"},{"title":"","date":"2019-01-31T15:37:29.076Z","updated":"2019-01-31T15:37:29.076Z","comments":true,"path":"reg/style.2.css","permalink":"http://yoursite.com/reg/style.2.css","excerpt":"","text":"/* ------------------------------------------------------------ Reset Styles (from meyerweb.com) ------------------------------------------------------------ */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td { margin: 0; padding: 0; border: 0; outline: 0; font-weight: inherit; font-style: inherit; font-size: 100%; font-family: inherit; vertical-align: baseline; } h1, h2, p , ul { font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; margin: 10px 25px; } li { margin: 0 25px; } h1 { font-size: 150%; font-weight: bold; } h2 { font-size: 125%; font-weight: bold; } code { font-family: \"Courier New\", monospace; } #about { border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; background: #FCF1B8; font-size: 14px; border: 3px solid #FCC119; margin: 0 0 25px 0;} #showAbout { position: absolute; left: 275px; top: 5px; padding: 3px 5px; height: 20px; margin: 0; background: white; border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; } #showAbout a, #showAbout a:visited, #showAbout a:hover { text-decoration: none; color: #333; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-weight: bold; letter-spacing: -.5px; font-size: 15px; } #hideAbout { text-align: center; } #hideAbout a, #hideAbout a:visited, #hideAbout a:hover { color: black; text-decoration: none; } body { margin: 0; padding: 0 0 10px 0; text-align: center; } div { margin: 0; padding: 0; } #header { position: relative; width: 975px; text-align: left; margin: 0 auto; } #logo { margin: 0; width: 152px; height: 42px; background: url('imgs/logo.png'); } #logo a { display: block; width: 100%; height: 100%; text-indent: -9999em; } #credits { margin: 0 0 25px 0;} #hifiMention { display: inline; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; } #nmcLogo { display: inline; } #nmcLogo img { vertical-align: top; margin: 10px 20px; display: inline; } #social { position: absolute; left: 650px; top: 4px; padding: 5px 0 0 0; height: 20px; margin: 0; background: white; border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px;} #container {margin-top: 10px;} #container #tool { width: 700px; margin:0 auto;} #container #sidebar { width: 325px; float: right; } #cheatSheet { font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; background: #FCF1B8; font-size: 14px; border: 3px solid #FCC119; text-align: center; } #cheatSheet code { font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; } #cheatSheet dl { text-align: left; display: none; margin: 10px 5px 10px 15px; } #selectedContent dl { display: block; } #cheatSheet dl dt { text-decoration: underline; display: block; color: #333; font-size: 110%; } #cheatSheet dl dd { text-align: left; margin: 0 0 5px 10px;} #cheatSheet dl dd ul { margin: 0 0 0 0; padding: 0;} #cheatSheet dl dd ul li { list-style: none; margin: 0 0 0 0; padding: 0;} #cheatSheet h2 { font-weight: normal; font-size: 20px; margin: 0; background: #FCC119; color: #FFF; padding: 5px 0; } #cheatSheet h3 { cursor: pointer; cursor: hand; font-weight: normal; font-size: 16px; line-height: 40px; background: #FCC119; color: #FFF; display: inline; padding: 5px 10px; border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; } #cheatSheet h3.selected { background: #fff; color: #FCC119; font-weight: bold; border: 2px solid #FCC119; text-shadow: 0px 1px 1px #ccc; } #cheatSheet h3:hover { text-shadow: 0px 1px 1px #ccc; } #cheatSheet code { font-size: 15px; margin: 0 10px 0 0; } #regexPane { border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; } #regexPane.valid { background: #FFFF8F; border: 3px solid #FFFF33; } #regexPane.valid #regex{ border: 2px solid #FFFF33; } #regexPane.match { background: #D2FFC4; border: 3px solid #2DC800; } #regexPane.match #regex { border: 2px solid #2DC800; } #regexPane.invalid { background: #FFE6CC; border: 3px solid #FF0000; } #regexPane.invalid #regex { border: 2px solid #FF0000; } #regexPaneText { display: none; font-size: 23px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; text-align: center; padding: 10px; } #editRegex { cursor: pointer; cursor: hand; } #editRegex:hover { text-decoration: underline; } #regexPaneInputs { text-align: center; font-size: 20px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; } #regex { border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px;font-size: 20px; padding: 5px 0 5px 0; margin: 10px 0 0 ; width: 550px; text-align: center; } #regexPaneCommands, #regexPaneCommands ul, #regexPaneCommands li{ display: inline; margin: 0; padding: 0; font-size: 12px; } #regexPaneCommands li { margin: 0 10px 0 0; padding: 2px 5px; cursor: pointer; cursor: hand; } #regexPane.valid #regexPaneCommands li { background: #FFFF33; color: black;} #regexPane.match #regexPaneCommands li{ background: #2DC800; color: white;} #regexPane.invalid #regexPaneCommands li{ display: none;} #regexFlags { font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; } #regexFlags ul { margin: 0; display: inline; text-align: center; } #regexFlags li { margin: 0; list-style: none; display: inline; } dl { margin: 0; } dt { display: none; } dd { margin: 0 0 5px 0; text-align: center; } #regexFlagsDt { display: inline; } #haystackPane { font-size: 20px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; margin: 25px 0; } #haystackPaneText { cursor: pointer; cursor: hand; width: 100%; white-space: pre-wrap; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;} #haystackPaneInputs { display: none; } #haystackPaneInputs textarea { width: 625px; height: 450px; border: 3px solid gray; margin: 0; font-size: 20px; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; } #haystackPane .match { font-weight: bold; font-size: 130%; background: yellow; } .group-1 { background: #6FFF44; } .group-2 { background: #99C7FF; } .group-3 { background: #FFCC33; } .group-4 { background: #CC99FF; } .group-5 { background: #D698FE; } .group-6 { background: #B4D1B6; } .group-7 { background: #AAAAFF; } .group-8 { background: #FFA8D3; } .group-9 { background: #F2F4B3; } .group-10 { background: #C4ABFE; } #matchesPane table { border-collapse: collapse; border-top: 3px solid gray; border-bottom: 3px solid gray; width: 100%; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 20px; } #matchesPane thead tr td { font-weight: bold; border-bottom: 1px solid gray; } #matchesPane tr, #matchesPane td, #matchesPaneTable { margin: 0; padding: 5px; } #matchNumber { width: 25px; } #code {border-radius: 3px; -moz-border-radius: 3px; -webkit-border-radius: 3px; white-space: pre-wrap; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background: black; border: 3px solid gray; color: white; padding: 25px; margin: 25px 0 0 0; } #codePaneCommands, #codePaneCommands ul, #codePaneCommands li{ display: inline; margin: 0; padding: 0; font-size: 12px; } #codePaneCommands li { margin: 0 0 0 250px; padding: 2px 5px; cursor: pointer; cursor: hand; color: white; background: gray; } #matchInputOnce { display: none; } #matchInputGlobal { dispaly: none; } #footer { clear: both; float:none; width: 975px; margin: 0 0; padding: 25px 0; color: #aaa; font-size: 12px; } #footer a, #footer a:visited, #footer a:hover { color: #000; }"},{"title":"","date":"2019-01-31T15:37:29.076Z","updated":"2019-01-31T15:37:29.076Z","comments":true,"path":"reg/regexp.5.js","permalink":"http://yoursite.com/reg/regexp.5.js","excerpt":"","text":"/** * A Simple JavaScript Regular Expression Editor * Copyright (c) 2009 - Kris Jordan, New Media Campaigns * http://www.newmediacampaigns.com/ */ $(document).ready(function() { var app, aboutPane, regexPane, haystackPane, matchTable, exampleCode, cheatSheet; var aboutPane = { $about: $(\"#about\"), $showAbout: $(\"#showAbout\"), $hideAbout: $(\"#hideAbout\"), init: function() { var toggle = function() { aboutPane.$about.toggle(); }; toggle(); this.$showAbout.click(toggle); this.$hideAbout.click(toggle); } }; var regexPane = { // Children Nodes $pane: $(\"#regexPane\"), $textPane: $(\"#regexPaneText\"), $inputsPane: $(\"#regexPaneInputs\"), $editRegex: $(\"#editRegex\"), $inputs: $(\"#regexPaneInputs :input\"), $labels: $(\"#regexPaneInputs label\"), $regex: $(\"#regex\"), $globalFlag: $(\"#globalFlag\"), $insensitiveFlag: $(\"#insensitiveFlag\"), $multilineFlag: $(\"#multilineFlag\"), $regexFlagsPlaceHolder: $(\"#regexFlagsPlaceHolder\"), init: function() { this.$inputs.change(app.refresh) .keyup(app.refresh) .mouseup(function() { setTimeout(app.refresh,50); }); this.$regex.focus(); }, regexString: function() { return \"/\" + this.$regex.val() + \"/\" + this.regexFlags(); }, regexCode: function() { return \"var regex = \" + regexPane.regexString() + \";\"; }, regexFlags: function() { return (this.$globalFlag.is(\":checked\") ? \"g\" : \"\") + (this.$insensitiveFlag.is(\":checked\") ? \"i\" : \"\") + (this.$multilineFlag.is(\":checked\") ? \"m\" : \"\"); }, hintValidity: function() { var newClass = (haystackPane.isMatch() ? \"match\" : (haystackPane.isValid() ? \"valid\" : \"invalid\")); this.$pane.removeClass(); this.$pane.addClass(newClass); }, refresh: function() { this.$regexFlagsPlaceHolder.text(this.regexFlags()); this.$editRegex.text(this.regexString()); this.hintValidity(); } }; var haystackPane = { $textPane: $(\"#haystackPaneText\"), $inputsPane: $(\"#haystackPaneInputs\"), $haystack: $(\"#haystack\"), _isMatch: false, _isValid: false, init: function() { this.$textPane.click(this.toggleEdit); this.$haystack.blur(this.toggleEdit); }, isEditable: function() { return this.$inputsPane.css(\"display\") !== \"none\"; }, toggleEdit: function() { if(haystackPane.isEditable()) { haystackPane.$inputsPane.hide(); haystackPane.$textPane.fadeIn(250); } else { haystackPane.$textPane.hide(); haystackPane.$inputsPane.fadeIn(250); haystackPane.$haystack.focus(); } app.refresh(); }, isMatch: function() { return this._isMatch; }, isValid: function() { return this._isValid; }, matches: function() { return this._matches; }, refresh: function() { function evalRegex() { try { var regexString = regexPane.regexCode(); eval(regexString); return regex; } catch(e) { return false; } } function findMatches(regex,text) { regex.lastIndex = 0; if(regex.test(text)) { regex.lastIndex = 0; var matches = new Array(); var match; if(!regexPane.$globalFlag.is(\":checked\")) { match = regex.exec(text); matches.push({result: match, lastIndex: match[0].length}); } else { while((match = regex.exec(text)) !== null) { if(match[0] === \"\") { regex.lastIndex += 1 } else { matches.push({result: match, lastIndex: regex.lastIndex}); } } } return matches; } else { return false; } } function drawPlainText(text) { haystackPane.$textPane.html(text); } function drawHighlightedText(text, matches) { var highlight = \"\"; for( var i = 0; i < matches.length; i++ ) { var result = matches[i].result; var lastIndex = matches[i].lastIndex; // Capturing groups var matchString = result[0]; var matchIndex = result.index; var lastStartPosition = startPosition; var startPosition = matchIndex; var endPosition = startPosition + matchString.length; var before = encode(text.slice(lastStartPosition,startPosition)); var searchString = \"^(.*?)\"; var replaceString = \"$1\"; var k = 1; for(var j = 1; j < result.length; j++) { if(result[j] !== undefined) { var resultRegex = encode(result[j].replace(/([.?\\^${}\\[\\]()*+\\/\\\\])/g,\"\\\\$1\")); searchString += resultRegex + \"(.*?)\"; replaceString += \"\" + encode(result[j]) + \"$\" + (k+1); k += 1; } } searchString += \"$\"; matchString = encode(matchString).replace(new RegExp(searchString), replaceString); highlight += before + \"\" + (matchString === '' ? ' ' : matchString) + \"\"; startPosition = endPosition; } highlight += encode(text.slice(endPosition)); haystackPane.$textPane.html(highlight); } var regex = evalRegex(); var text = this.$haystack.val(); drawPlainText(encode(text)); if(regex === false) { this._isValid = this._isMatch = false; } else { this._isValid = true; this._matches = findMatches(regex, text); if(this._matches === false) { this._isMatch = false; } else { this._isMatch = true; drawHighlightedText(text, this._matches); } } } }; var matchTable = { $pane: $(\"#matchesPane\"), refresh: function() { if(!haystackPane.isMatch()) { this.$pane.hide(); } else { var matches = haystackPane.matches(); var matchTable = \"匹配的字符\"; var columns = 0; for(var i = 0; i < matches.length ; i++ ) { if(columns < matches[i].result.length) { columns = matches[i].result.length; } } for(var i = 1; i < columns; i++) { matchTable += \"$\" + i + \"\"; } matchTable += \"\"; for( var i = 0; i < matches.length; i++ ) { var result = matches[i].result; matchTable += \"\" + (i + 1) + \"\"; matchTable += \"\" + encode(result[0].length > 20 ? result[0].substring(0,20) + '...' : result[0]) + \"\"; for(var j = 1; j < columns; j++) { if(result[j] !== undefined) { matchTable += \"\" + encode(result[j].length > 20 ? result[j].substring(0,20) + '...' : result[j]) + \"\"; } else { matchTable += \"&nbsp;\"; } } matchTable += \"\"; } matchTable += \"\"; this.$pane.html(matchTable); this.$pane.show(); } } }; var exampleCode = { $pane: $(\"#codePane\"), $code: $(\"#code\"), $regexCode: $(\"#regexCode\"), $matchInputOnce: $(\"#matchInputOnce\"), $matchInputGlobal: $(\"#matchInputGlobal\"), init: function() { }, refresh: function () { if(haystackPane.isValid()) { this.$pane.show(); this.$regexCode.text(regexPane.regexCode()); if(!regexPane.$globalFlag.is(\":checked\")) { this.$matchInputOnce.show(); this.$matchInputGlobal.hide(); } else { this.$matchInputOnce.hide(); this.$matchInputGlobal.show(); } } else { this.$pane.hide(); } } }; var cheatSheet = { $div: $(\"#cheatSheet\"), $selectedContent: false, init: function() { this.$div.append(\"\"); this.$selectedContent = this.$div.children(\"#selectedContent\"); this.$div.children(\"h3\").click(function() { cheatSheet.deselect(); cheatSheet.select($(this)); }); this.select(this.$div.children(\"h3:first\")); }, deselect: function() { this.$div.children(\".selected\").removeClass(\"selected\"); this.$selectedContent.empty(); }, select: function($h3) { $h3.addClass(\"selected\") .next().clone().appendTo(this.$selectedContent); } }; var app = { init: function() { aboutPane.init(); regexPane.init(); haystackPane.init(); exampleCode.init(); cheatSheet.init(); this.refresh(); }, refresh: function() { haystackPane.refresh(); regexPane.refresh(); matchTable.refresh(); exampleCode.refresh(); } }; app.init(); function encode(string) { return string .replace(/&/g,'&amp;') .replace(//g,'&gt;') .replace(/ /g,'&nbsp;&nbsp;') .replace(/\\n/g,\"\") .replace(/\\t/g,\"&nbsp;&nbsp;\"); } });"},{"title":"","date":"2019-01-31T15:37:29.076Z","updated":"2019-01-31T15:37:29.076Z","comments":true,"path":"reg/jquery.min.js","permalink":"http://yoursite.com/reg/jquery.min.js","excerpt":"","text":"/* * jQuery JavaScript Library v1.3.2 * http://jquery.com/ * * Copyright (c) 2009 John Resig * Dual licensed under the MIT and GPL licenses. * http://docs.jquery.com/License * * Date: 2009-02-19 17:34:21 -0500 (Thu, 19 Feb 2009) * Revision: 6246 */ (function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=/^[^]*$|^#([\\w-]+)$/,f=/^.[^:#\\[\\.,]*$/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E===\"string\"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:\"\",jquery:\"1.3.2\",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H===\"find\"){G.selector=this.selector+(this.selector?\" \":\"\")+E}else{if(H){G.selector=this.selector+\".\"+H+\"(\"+E+\")\"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F===\"string\"){if(H===g){return this[0]&&o[G||\"attr\"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E==\"width\"||E==\"height\")&&parseFloat(F)-1:o(H).is(E)){o.data(H,\"closest\",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E===\"string\"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),\"not\",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)0},hasClass:function(E){return !!E&&this.is(\".\"+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,\"option\")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,\"select\")){var I=E.selectedIndex,L=[],M=E.options,H=E.type==\"select-one\";if(I=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,\"select\")){var N=o.makeArray(K);o(\"option\",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(/ jQuery\\d+=\"(?:\\d+|null)\"/g,\"\"):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),\"slice\",Array.prototype.slice.call(arguments).join(\",\"))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,\"table\")&&o.nodeName(O,\"tr\")?(N.getElementsByTagName(\"tbody\")[0]||N.appendChild(N.ownerDocument.createElement(\"tbody\"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:\"script\"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||\"\")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J===\"boolean\"){E=J;J=arguments[1]||{};H=2}if(typeof J!==\"object\"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H\"});var O=S.replace(/^\\s+/,\"\").substring(0,10).toLowerCase();var Q=!O.indexOf(\""},{"title":"404 Not Found：该页无法显示","date":"2019-02-01T14:53:29.431Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-01T14:53:29.442Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-02-01T14:53:29.445Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-01T14:53:29.450Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-02-01T14:53:29.453Z","updated":"2019-01-31T15:53:28.000Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-02-01T14:53:29.456Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-01T14:53:29.458Z","updated":"2019-01-31T15:53:28.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"VM详细用法都在这里","slug":"170117-vimusage","date":"2019-01-31T15:37:29.074Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2019/01/31/170117-vimusage/","link":"","permalink":"http://yoursite.com/2019/01/31/170117-vimusage/","excerpt":"","text":"","categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/其它/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"Hibernate5的Naming strategies","slug":"170216-hiberante5","date":"2017-02-19T15:07:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2017/02/19/170216-hiberante5/","link":"","permalink":"http://yoursite.com/2017/02/19/170216-hiberante5/","excerpt":"","text":"项目从hiberante4.x升级到5.x，发现org.hibernate.cfg.NamingStrategy根本不生效，看了一下hibernate官网的Use Guide 原来org.hibernate.cfg.NamingStrategy已经被 12hibernate.implicit_naming_strategyhibernate.physical_naming_strategy 替代了！ 简单解释一下这两个属性，它们就像一个“过滤器”，第一步，表名或列名中没有显式声明的属性都会用ImplicitNamingStrategy处理ImplicitNamingStrategy的实现有好几个，文档就不一一列举了。第二步，显式或隐式声明的表名或列名都会用PhysicalNamingStrategy的实现类处理！ 问题来了，PhysicalNamingStrategy的实现只有PhysicalNamingStrategyStandardImpl，我现在想实现aaYy=&gt;xx_yy的转换是不行的！ 那只能自己写一个实现了 123456789101112131415161718192021222324252627282930313233343536public class PhysicalNamingStrategyJpaImpl implements PhysicalNamingStrategy, Serializable &#123; @Override public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) &#123; return convert(name); &#125; @Override public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) &#123; return convert(name); &#125; @Override public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) &#123; return convert(name); &#125; @Override public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) &#123; return convert(name); &#125; @Override public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) &#123; return convert(name); &#125; private Identifier convert(Identifier identifier) &#123; if (identifier == null || identifier.getText() == null || \"\".equals(identifier.getText())) &#123; return identifier; &#125; String regex = \"([a-z])([A-Z])\"; String replacement = \"$1_$2\"; String newName = identifier.getText().replaceAll(regex, replacement).toLowerCase(); return Identifier.toIdentifier(newName); &#125;&#125; 然后配置一下jpa，搞定！ 1234567891011121314&lt;bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;property name=\"packagesToScan\" value=\"com.gl.module.*.domain\"/&gt; &lt;property name=\"jpaPropertyMap\"&gt; &lt;map&gt; &lt;entry key=\"hibernate.physical_naming_strategy\" value=\"com.gl.infra.hibernate.PhysicalNamingStrategyJpaImpl\" /&gt; &lt;entry key=\"hibernate.implicit_naming_strategy\" value=\"org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl\"/&gt; &lt;entry key=\"hibernate.hbm2ddl.auto\" value=\"$&#123;hibernate.hbm2ddl.auto&#125;\"/&gt; &lt;entry key=\"hibernate.show_sql\" value=\"$&#123;hibernate.show_sql&#125;\"/&gt; &lt;entry key=\"hibernate.format_sql\" value=\"$&#123;hibernate.format_sql&#125;\"/&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name=\"jpaVendorAdapter\" ref=\"jpaVendorAdapter\"/&gt;&lt;/bean&gt;","categories":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/categories/配置/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"},{"name":"hibernate","slug":"hibernate","permalink":"http://yoursite.com/tags/hibernate/"}]},{"title":"使用YAML代替Properties","slug":"170216-yaml","date":"2017-02-16T13:07:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2017/02/16/170216-yaml/","link":"","permalink":"http://yoursite.com/2017/02/16/170216-yaml/","excerpt":"","text":"1.YAML简介简单来讲，YAML是一种比Properties可读性更好的文本。大多项目都是用Properties做配置文件，一直觉得项目中的Properties配置文件里的内容实在太杂乱无章了，用上YAML之后心情都愉快了不少。 下图是properties 下图是yaml 在数据更多的情况下，明显yaml的可读性更高！而且在IDE支持的情况下，还可以折叠 2.非Spring Boot项目配置需要用到spring-beans 4.0以上的版本 添加maven依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.yaml&lt;/groupId&gt; &lt;artifactId&gt;snakeyaml&lt;/artifactId&gt; &lt;version&gt;1.17&lt;/version&gt;&lt;/dependency&gt; 直接在spring的配置文件中加入 12345678&lt;bean id=\"yamlPropertiesFactoryBean\" class=\"org.springframework.beans.factory.config.YamlPropertiesFactoryBean\"&gt; &lt;property name=\"resources\"&gt; &lt;list&gt; &lt;value&gt;classpath:application.yml&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;&lt;context:property-placeholder properties-ref=\"yamlPropertiesFactoryBean\" /&gt; 像使用properties一样读取就可以了！","categories":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/categories/配置/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"}]},{"title":"Linux下MySQL的安装及使用","slug":"170119-mysql","date":"2017-01-24T14:10:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2017/01/24/170119-mysql/","link":"","permalink":"http://yoursite.com/2017/01/24/170119-mysql/","excerpt":"","text":"1.下载mysql的官网下载地址：https://dev.mysql.com/downloads/mysql/ 我下载的是5.7.17的版本(mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz)，居然要600多MB，以前的版本就一两百兆 下载完成后解压到/usr/local/vendor/mysql-5.7.17下，以下的命令都是在这个目录执行 2.添加用户权限123456## 添加mysql组groupadd mysql## 将用户mysql加进组mysqluseradd mysql -g mysql## 改变目录的使用者权限chown -R mysql.mysql /usr/local/vendor/mysql-5.7.17 3.安装1./bin/mysql_install_db --user=mysql --basedir=/usr/local/vendor/mysql-5.7.17 --datadir=/usr/local/vendor/mysql-5.7.17/data 命令执行后的结果 123456➜ bin ./mysql_install_db --user=mysql --basedir=/usr/local/vendor/mysql-5.7.17 --datadir=/usr/local/vendor/mysql-5.7.17/data2017-01-24 22:24:26 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize2017-01-24 22:24:30 [WARNING] The bootstrap log isn&apos;t empty:2017-01-24 22:24:30 [WARNING] 2017-01-24T14:24:26.907725Z 0 [Warning] --bootstrap is deprecated. Please consider using --initialize instead2017-01-24T14:24:26.908265Z 0 [Warning] Changed limits: max_open_files: 1024 (requested 5000)2017-01-24T14:24:26.908269Z 0 [Warning] Changed limits: table_open_cache: 431 (requested 2000) 4.配置12## 复制配置文件到/etc/my.cnfcp support-files/my-default.cnf /etc/my.cnf 复制完成之后修改配置文件vi /etc/my.cnf 1234567# These are commonly set, remove the # and set as required.basedir = /usr/local/vendor/mysql-5.7.17datadir = /usr/local/vendor/mysql-5.7.17/dataport = 3306# server_id = .....socket = /tmp/mysql.sockcharacter-set-server = utf8 5.启动cp support-files/mysql.server /etc/init.d/mysqld 将命令拷贝到init.d之后执行以下命令： service mysqld start 发现会报错 1234567Starting MySQL.Logging to &apos;/usr/local/vendor/mysql-5.7.17/data/vagrant-centos65.vagrantup.com.err&apos;.2017-01-24T15:10:10.978973Z mysqld_safe The file /usr/local/mysql/bin/mysqlddoes not exist or is not executable. Please cd to the mysql installationdirectory and restart this script from there as follows:./bin/mysqld_safe&amp;See http://dev.mysql.com/doc/mysql/en/mysqld-safe.html for more information ERROR! The server quit without updating PID file (/usr/local/vendor/mysql-5.7.17/data/vagrant-centos65.vagrantup.com.pid). mysqld_safe需要执行/usr/loca/mysql/bin/mysqld，但是我们的软件目录又不是在/usr/local/mysql，所以使用最简单的方法，建立一个软链接就可以了 ln -s /usr/local/vendor/mysql-5.7.17/bin/mysqld /usr/local/mysql/bin 设置完后再启动 12Starting MySQL.Logging to &apos;/usr/local/vendor/mysql-5.7.17/data/vagrant-centos65.vagrantup.com.err&apos;. SUCCESS! 6.修改密码mysql安装好之后会有一个初始密码 cat /root/.mysql_secret 设置mysql的软链接： ln -s /usr/local/vendor/mysql-5.7.17/bin/mysql /usr/local/bin 使用初始密码登录mysql： mysql -uroot -p***** 重置密码： mysql&gt;SET PASSWORD = PASSWORD(&#39;123456&#39;); 访问授权： mysql&gt;GRANT ALL ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"使用HttpClient上传文件","slug":"170119-httpclient","date":"2017-01-19T14:19:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2017/01/19/170119-httpclient/","link":"","permalink":"http://yoursite.com/2017/01/19/170119-httpclient/","excerpt":"","text":"这个demo是基于httpclient 4.5.2来做实验的，用到的jar包有httpclient 4.5.2 httpmime 4.5.2及spring-boot 1.4.3.RELEASE相关依赖，不多说，直接上代码 Client12345678910111213141516171819202122232425262728293031@Configuration@ComponentScan@EnableAutoConfiguration@RestController@RequestMapping(\"/hc-client\")public class ClientStart &#123; private static final String server_url = \"http://localhost:8081/hc-server/upload\"; private static File image = new File(System.getProperty(\"user.dir\") + \"/client/src/main/resources/vim.jpg\"); @RequestMapping(value = \"upload\", method = RequestMethod.GET) public String upload() throws Exception &#123; HttpClient httpClient = HttpClientBuilder.create().build(); HttpPost httpPost = new HttpPost(server_url); FileBody fileBody = new FileBody(image); HttpEntity reqEntity = MultipartEntityBuilder .create() .setMode(HttpMultipartMode.BROWSER_COMPATIBLE) .addPart(\"file\", fileBody) .setCharset(CharsetUtils.get(\"UTF-8\")) .build(); httpPost.setEntity(reqEntity); httpClient.execute(httpPost); return \"success\"; &#125; public static void main(String[] args) &#123; SpringApplication.run(ClientStart.class, args); &#125;&#125; Server1234567891011121314151617181920@Configuration@ComponentScan@EnableAutoConfiguration@RestController@RequestMapping(\"/hc-server\")public class ServerStart implements EmbeddedServletContainerCustomizer &#123; @RequestMapping(value = \"/upload\", method = RequestMethod.POST) public String uploadHandle(MultipartFile file) &#123; return \"success\"; &#125; public static void main(String[] args) &#123; SpringApplication.run(ServerStart.class, args); &#125; public void customize(ConfigurableEmbeddedServletContainer container) &#123; container.setPort(8081); &#125;&#125; 以上例子我是亲测可以跑通的，要注意的一个小地方就是Client里的addPart(&quot;file&quot;, fileBody)要跟Server 里的uploadHandle(MultipartFile file)参数对应起来，不然file对象是接收不到数据的","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"如何生成SSH Keys","slug":"170117-createsshkey","date":"2017-01-17T12:32:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2017/01/17/170117-createsshkey/","link":"","permalink":"http://yoursite.com/2017/01/17/170117-createsshkey/","excerpt":"","text":"SSH key 可以让你在你的电脑和 Git @ OSC 之间建立安全的加密连接。 你可以按如下命令来生成sshkey ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; 查看你的public key，并把他添加到github cat ~/.ssh/id_rsa.pub 然后用如下命令来测试是否配置成功 ssh -T git@github.com","categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/其它/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"}]},{"title":"（实战）用Maven将项目打成一个可执行的Jar包","slug":"1609261","date":"2016-09-26T13:24:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2016/09/26/1609261/","link":"","permalink":"http://yoursite.com/2016/09/26/1609261/","excerpt":"","text":"在文章开头，先分享一个小经验。有些jar包在Maven仓库中可能没有，大家可能会使用 1234...&lt;scope&gt;system&lt;/scope&gt;&lt;systemPath&gt;$&#123;basedir&#125;/.../xx.jar&lt;/systemPath&gt;... 这种做法是不推荐的，使用这种做法虽然不会对项目的运行有什么影响，不过却会影响到Maven的打包，导致打包不成功，打包的时候可能会报下面的警告 12[WARNING] Some problems were encountered while building the effective model for com.gl:floder-mgr:jar:1.0[WARNING] &apos;profiles.profile[win64].dependencies.dependency.systemPath&apos; for org.eclipse.swt:swt-46-win64:jar should not point at files within the project directory, $&#123;project.basedir&#125;/lib/swt-4.6-win64.jar will be unresolvable by dependent projects @ line 133, column 33 虽然打包是成功，但实际上却没有成功在包里引用到这个jar。所以推荐的做法是使用install:install-file将jar包install到本地的maven仓库。 以下是maven的配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.gl.Client&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;!--&lt;descriptors&gt;--&gt; &lt;!--&lt;descriptor&gt;src/main/resources/package.xml&lt;/descriptor&gt;--&gt; &lt;!--&lt;/descriptors&gt;--&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 --&gt; &lt;addMavenDescriptor&gt;false&lt;/addMavenDescriptor&gt; &lt;manifest&gt; &lt;!-- 是否要把第三方jar放到manifest的classpath中 --&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;mainClass&gt;com.gl.Client&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;skipIfEmpty&gt;true&lt;/skipIfEmpty&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 配置好插件后，执行mvn package就可以看到输出目录里的jar包了，然后执行java -jar ***.jar就可以执行了","categories":[{"name":"应用, 实战","slug":"应用-实战","permalink":"http://yoursite.com/categories/应用-实战/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"},{"name":"swt","slug":"swt","permalink":"http://yoursite.com/tags/swt/"}]},{"title":"IBM SWT的使用","slug":"1609241","date":"2016-09-24T12:00:00.000Z","updated":"2019-01-31T15:37:29.074Z","comments":true,"path":"2016/09/24/1609241/","link":"","permalink":"http://yoursite.com/2016/09/24/1609241/","excerpt":"","text":"首先我要说一个很奇葩的问题，在OSX上的main函数执行的话，Java会一直抛一个问题，找了很久没找到问题 12345678910111213***WARNING: Display must be created on main thread due to Cocoa restrictions.Exception in thread &quot;main&quot; org.eclipse.swt.SWTException: Invalid thread access at org.eclipse.swt.SWT.error(Unknown Source) at org.eclipse.swt.SWT.error(Unknown Source) at org.eclipse.swt.SWT.error(Unknown Source) at org.eclipse.swt.widgets.Display.error(Unknown Source) at org.eclipse.swt.widgets.Display.createDisplay(Unknown Source) at org.eclipse.swt.widgets.Display.create(Unknown Source) at org.eclipse.swt.graphics.Device.&lt;init&gt;(Unknown Source) at org.eclipse.swt.widgets.Display.&lt;init&gt;(Unknown Source) at org.eclipse.swt.widgets.Display.&lt;init&gt;(Unknown Source) at org.eclipse.swt.widgets.Display.getDefault(Unknown Source) at com.gl.Client.main(Client.java:29) 后来发现，只需要在VM Options中加入-XstartOnFirstThread再运行程序，就没问题了，没找到关于这个参数的相关解释","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"web.xml零配置","slug":"1609211","date":"2016-09-21T14:24:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/09/21/1609211/","link":"","permalink":"http://yoursite.com/2016/09/21/1609211/","excerpt":"","text":"在servlet 3.0之后， web.xml已经不是必须的了， 我们的servlet, filter, listener都可以在代码里声明，容器在启动后会自己加载实现了WebApplicationInitializer的类. 原web.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\" metadata-complete=\"false\"&gt; &lt;display-name&gt;leben&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-context.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt; &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:logback.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;default&lt;/servlet-name&gt; &lt;url-pattern&gt;/assets/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/configs/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/modules/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/favicon.ico&lt;/url-pattern&gt; &lt;url-pattern&gt;/index.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[&lt;servlet-name&gt;]-servlet.xml，如spring-servlet.xml --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-mvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 实现WebApplicationInitializer之后123456789101112131415161718192021222324public class WebAppInitializer implements WebApplicationInitializer &#123; @Override public void onStartup(ServletContext servletContext) throws ServletException &#123; servletContext.setInitParameter(\"contextConfigLocation\", \"classpath:spring/spring-context.xml\"); servletContext.setInitParameter(\"logbackConfigLocation\", \"classpath:logback.xml\"); servletContext.addListener(new ContextLoaderListener()); servletContext.addListener(new RequestContextListener()); CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter(); characterEncodingFilter.setEncoding(\"UTF-8\"); FilterRegistration.Dynamic encodingFilter = servletContext.addFilter(\"CharacterEncodingFilter\", new CharacterEncodingFilter()); encodingFilter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), false, \"/\"); servletContext.getServletRegistration(\"default\").addMapping(\"/assets/*\", \"/configs/*\", \"/modules/*\", \"/favicon.ico\", \"/index.html\"); XmlWebApplicationContext webApplicationContext = new XmlWebApplicationContext(); webApplicationContext.setConfigLocation(\"classpath:spring/spring-mvc.xml\"); ServletRegistration.Dynamic dispatcherServlet = servletContext.addServlet(\"spring\", new DispatcherServlet(webApplicationContext)); dispatcherServlet.setLoadOnStartup(1); dispatcherServlet.addMapping(\"/api/*\"); &#125;&#125; 感觉写在代码里更加方便阅读","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Webpack应用实践","slug":"1609121","date":"2016-09-12T13:24:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/09/12/1609121/","link":"","permalink":"http://yoursite.com/2016/09/12/1609121/","excerpt":"","text":"Webpack是最年来Node.js的一款比较火的模块加载器兼打包工具，它可以将.scss .coffee .jade等资源编译成浏览器可以识别的.html .css .js文件。也可以使用它丰富的插件，来进行项目文件的压缩。 1. 安装Webpacknpm install webpack --save-dev 2. 配置WebpackWebpack的配置文件的默认位置是项目下的webpack.config.js文件，可以在项目的根路径直接使用webpack进行打包。也可以使用node xx/xxxx.js加载配置文件启动。 配置文件如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var path = require('path'), HtmlwebpackPlugin = require('html-webpack-plugin'), ExtractTextPlugin = require('extract-text-webpack-plugin'), ROOT_PATH = path.resolve(__dirname), APP_PATH = path.resolve(ROOT_PATH, 'src'), BUILD_PATH = path.resolve(ROOT_PATH, 'build');var extractCSS = new ExtractTextPlugin('stylesheets/[name].css');module.exports = &#123; //项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字 entry : &#123; 'app': './src/app.js' &#125;, //输出的文件名 合并以后的js会命名为bundle.js output : &#123; path : BUILD_PATH, filename: '[name].[hash].js' &#125;, devServer: &#123; historyApiFallback: true, hot : true, inline : true, progress : true &#125;, module : &#123; loaders: [ &#123; test : /\\.scss$/i, loader: extractCSS.extract(['css', 'sass']) &#125;, &#123; test : /\\.html$/, loader: 'vue-html' &#125;, &#123; test : /\\.vue$/, loader: 'vue' &#125; ] &#125;, //添加我们的插件 会自动生成一个html文件 plugins : [ new HtmlwebpackPlugin(&#123; template: './src/index.html'//模板 &#125;), extractCSS ]&#125;; webpack需要配置一个入口文件，需要在entry里配置，默认会找指定路径下的index.js并自动生成index.html,也可以使用HtmlwebpackPlugin，列用html作为模板生成。完成后使用命令webpack就可以简单的将项目打包。 3. 使用webpack-dev-server启动项目输入命令行npm install webpack-dev-server --save-dev安装webpack开发服务器。安装完成后在package.json里加入 123\"scripts\": &#123; \"start\": \"webpack-dev-server --hot --inline\"&#125; 然后使用命令npm start即可以启动开发服务器，而且还有自动刷新的功能，改css再也不用刷新就可以看到效果了。 4. 文件加载器(Loader)webpack有很多Loader，比如sass-loader,html-loader,vue-loader，安装之后在加进webpack.config.js的loaders就可以了","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"实用的开源工具库Guava之Table","slug":"1603201","date":"2016-03-20T05:30:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/03/20/1603201/","link":"","permalink":"http://yoursite.com/2016/03/20/1603201/","excerpt":"","text":"Table接口Table是Guava在jdk的基础上新增的一种新集合类型，是一个有序的键值对集合。可能通过行和列取出对应的值。而Table有可能是稀疏的，不是每个行列对都会有值。可以通过行（列）键值或取出一行（列）的数据，也可以同时使用，取出唯一的映射值。返回集合的方法是返回Tabale的中对象的引用，修改集合会修改表，修改表也会修改集合中的对象。所有函数操作都是可选的，如果所选的函数不可修改Table，则会抛出UnsupportedOperationException Table接口的实现ArrayTable, ForwardingTable, HashBasedTable, ImmutableTableArrayTableArrayTable的行和列的长度在初始化后是固定不可变的，行与列的键值不可为Null。Table接口中的clear及remove方法也不可使用，否则会报错，不过可以用erase及eraseAll方法代替。ArrayTable比 HashBasedTable和TreeBasedTable更有效地利用内存，除非ArrayTable是稀疏的。 注意此实现并不是线程安全的 ForwardingTableForwardingTable是实现了Table接口的抽象类 HashBasedTableHashBasedTable拥有Tabel接口的所有方法，通过column(c)columnKeySet()和columnMap()返回的视图是一个不支持remove()方法的迭代器(Iterator) 此实现中的所有列和行键值，以及对应的值也不可为空。通过行查询比通过列查询更高效。因为它的数据是存储在Map&lt;R, Map&lt;C, V&gt;&gt;这个结构中。理论上查询列的长度比查询行的长度会消耗更多的时间。 注意，此实现同样非线程安全。 ImmutableTableImmutableTable一经初始化，就不可以改变它里面的所有值，相当于只读。许多其他重要属性在ImmutableCollection RowSortedTable接口RowSortedTable是一个继承Table的接口，它的特别之处是表格中的行是有序的 RowSortedTable接口的实现TreeBasedTableTreeBasedTableTreeBasedTable是一个有序的表格，类型List，可以通过自身的comparator比较大小进行排序。当你构造此对象时，如果不为之先指定Comparator，则会使用默认的Comparator. rowKeySet()方法返回一个SortedSet对象，rowMap()方法返回一个SortedMap对象，用来代替Set对象及Map对象。","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Vagrant+Virtualbox 打造统一的部署环境","slug":"1602051-vagrant","date":"2016-02-05T05:30:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/02/05/1602051-vagrant/","link":"","permalink":"http://yoursite.com/2016/02/05/1602051-vagrant/","excerpt":"","text":"可能大家都有遇到过，同一套代码，在你的电脑上出问题，但在我的电脑上却不会出问题。其实这都是因为部署环境的差异造成的。Vagrant+ Virtualbox就是解决这种问题的其中一套解决方案。 1.安装Vagrant和VitualBox首先Vagrant和Virtualbox的下载安装是很简单的 Vagrant的下载地址:https://www.vagrantup.com/ Virtualbox的下载地址:https://www.virtualbox.org/ 下载好直接安装就可以，此外还要下载官方封装好的镜像 vagrantbox镜像的下载地址：http://www.vagrantbox.es/ 2.添加镜像到Vagrant1vagrant box add centos65 /vagrant/centos/centos65-x86_64.box 添加之后 vagrant就有拥有一个名字叫做centos65的虚拟机 3.初始化环境12cd /vagrant/centos ##切换目录，随意vagrant init centos65 ##为centos65初始化一个环境 执行命令后，/vagrant/centos目录下会有一个叫Vagrantfile的文件 简单介绍一下这个配置文件： config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot; 打开这段配置后，虚拟机会拥有一个为192.168.33.10的IP,宿主可以通过ssh访问到这个虚拟机。 config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot; vagrant可以为虚拟机提供一个映射目录，这样可以很简便地为虚拟机与宿主之间共享文件 config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080 打开这段注释后，表示将宿主的8080端口的TCP请求转发到虚拟机的80端口中 config.vm.forwarded_port 80, 8080, protocol: &quot;udp&quot; 默认是转发TCP的请求，如果需要转发UDP的，要加上protocol 4.启动虚拟机12cd /vagrant/centos/centos65-x86_64.boxvagrant up 出现以下界面则表示成功了 5.连接虚拟机在vagrant的目录使用vagrant ssh即可，默认的密码是vagrant，也可以在配置文件里配置默认登录的帐号 12config.ssh.username=&quot;root&quot;config.ssh.password=&quot;vagrant&quot; 6.打包Box1234vagrant package -hUsage: vagrant package [options] [name]Options: --base NAME virtualbox程序里面的虚拟机的名称，不是box的名字也不是Vagrantfile里面的虚拟机名称.默认是打包当前目录下面的虚拟机。 --output NAME 要打包成的box名称，不会自动添加.box后缀，要手动加.默认值package.box --include FILE... 打包时包含的文件名，你可以把.box文件理解为一个压缩包 --vagrantfile FILE 打包时包含的Vagrantfile文件，原理和上面类似 示例：vagrant package --base centos65 --output centos65x64.box --vagrantfile Vagrantfile","categories":[{"name":"应用","slug":"应用","permalink":"http://yoursite.com/categories/应用/"}],"tags":[{"name":"vagrant","slug":"vagrant","permalink":"http://yoursite.com/tags/vagrant/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"java中的并发编程","slug":"1601072","date":"2016-01-07T13:17:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/01/07/1601072/","link":"","permalink":"http://yoursite.com/2016/01/07/1601072/","excerpt":"","text":"java中要实现多线程有两种方法，一种是继承Thread类，另一种是现实Runnable，以下给出第一种的方式 1234567891011121314151617181920212223242526272829303132public class ThreadfTester &#123; private static final Logger log = LoggerFactory.getLogger(ThreadfTester.class); public static void main(String[] args) &#123; MyThread t1 = new MyThread(\"我是t1\"); MyThread t2 = new MyThread(\"我是t2\"); t1.setPriority(Thread.MIN_PRIORITY); t2.setPriority(Thread.MAX_PRIORITY); t1.start(); t2.start(); &#125; public static class MyThread extends Thread &#123; private String word; public MyThread(String word) &#123; this.word = word; &#125; @Override public void run() &#123; super.run(); for (int i = 1; i &lt;= 20; i++) &#123; log.info(\"我是线程&#123;&#125;,第&#123;&#125;次\", this.word, i); if (i == 20) log.info(\"&#123;&#125;,我执行完了!!\", this.word); &#125; &#125; &#125;&#125; 不过这两种方法在线程执行完之后都无法方便地获取线程的返回值，在JDK1.5+，新增了Callable接口，FutureTask类以及Future类1234567891011121314151617181920public class FutureTester &#123; public static void main(String[] args) throws Exception &#123; ExecutorService executorService = Executors.newCachedThreadPool(); MyTask task = new MyTask(); Future&lt;Integer&gt; result = executorService.submit(task); System.out.println(result.get()); &#125; private static class MyTask implements Callable&lt;Integer&gt; &#123; @Override public Integer call() throws Exception &#123; int sum = 0; for (int i=0; i&lt;100; i++) sum+=i; Thread.sleep(10000); return sum; &#125; &#125;&#125; 使用第二种方法，可以处理多个任务的返回值，然后再进行业务处理","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"http://yoursite.com/tags/多线程/"}]},{"title":"Mybatis通用Mapper的开发","slug":"1601071","date":"2016-01-06T16:17:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2016/01/07/1601071/","link":"","permalink":"http://yoursite.com/2016/01/07/1601071/","excerpt":"","text":"现在Java流行的ORM框架不过Hibernate和Mybatis，两者的都有优缺点。简单来说Hibernate的配置少，开发起来方便，不过有时候表关联查询就麻烦了，特别是业务复杂的时候，还是得手写SQL。而Mybatis比较适合上来就干的项目，不过SQL写多了也是烦人，不过在SQL调优方面比较有优势，更适合在有DBA配置的时候使用。 其实Mybatis也可以通过拦截器的做法实现通用的增删查改，不过比较局限的是单表，多表关联查询还是老老实实手写。以下分享一下我最近这段时间的研究学习。 12345678910111213141516171819202122232425262728293031323334@Intercepts(&#123; @Signature(type = Executor.class, method = \"query\", args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;), @Signature(type = Executor.class, method = \"update\", args = &#123;MappedStatement.class, Object.class&#125;)&#125;)public class MapperInterceptor implements Interceptor &#123; private final static MapperHelper MAPPER_HELPER = new MapperHelper(); @Override public Object intercept(Invocation invocation) throws Throwable &#123; Object[] objects = invocation.getArgs(); MappedStatement ms = (MappedStatement) objects[0]; if (MAPPER_HELPER.isUniversalMapper(ms.getId())) &#123; if (ms.getSqlSource() instanceof RawSqlSource) &#123; MAPPER_HELPER.setSqlSource(ms); &#125; &#125; return invocation.proceed(); &#125; @Override public Object plugin(Object target) &#123; if (target instanceof Executor) &#123; return Plugin.wrap(target, this); &#125; else &#123; return target; &#125; &#125; @Override public void setProperties(Properties properties) &#123; MAPPER_HELPER.setProperties(properties); &#125;&#125; 以上代码就是mybatis的拦截器，可以对mybatis的select, insert, update及delete动作进行拦截，我们可以在动作执行完毕前加入一些自身的逻辑。 编写通用Mapper的核心在Mybatis的MappedStatement类中，Mybatis解析完xml后会将xml的内容转成一个MappedStatement对象，其实里面的SqlSource对象是关键。我们可以重新修改sql后赋值给SqlSource，这个就是编写通用Mapper的原理。 12345678protected void setSqlSource(MappedStatement ms, SqlSource sqlSource) &#123; setValue(ms, \"sqlSource\", sqlSource);&#125;protected void setValue(MappedStatement ms, String key, Object object) &#123; MetaObject msObject = SystemMetaObject.forObject(ms); msObject.setValue(key, object);&#125; 使用MetaObject对象，我们可以利用反射重新给MappedStatement对象里的属性赋值。 123@Select(&#123;\"com.kadima.simplex.common.base.BaseMapperBuilder\",\"selectByExample\"&#125;)@ResultMap(\"entityMap\")List&lt;E&gt; selectByExample(E e); BaseMapper里有一个selectByExample的方法，只要其他Mapper接口继承这个类，就可以不需要在xml中写实现selectByExample的sql，程序会通过反射找到BaseMapperBuilder里的selectByExample方法，以下是些方法里的实现 123456789101112public SqlNode selectByExample(final MappedStatement ms) &#123; List&lt;SqlNode&gt; sqlNodes = new ArrayList&lt;&gt;(); sqlNodes.add(new StaticTextSqlNode(\"select \" + EntityHelper.getAllColumnsName(ms) + \" from \" + EntityHelper.getTableName(ms))); List&lt;SqlNode&gt; whereNode = new ArrayList&lt;&gt;(); whereNode.add(new StaticTextSqlNode(\"1=1\")); for (EntityHelper.EntityColumn column : EntityHelper.getAllColumns(ms)) &#123; StaticTextSqlNode columnNode = new StaticTextSqlNode(\" and \" + column.getColumn() + \" = #&#123;\" + column.getProperty() + \"&#125;\"); whereNode.add(getIfNotNull(column, columnNode, false)); &#125; sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(whereNode))); return new MixedSqlNode(sqlNodes);&#125; 对这方面有兴趣的同学，可以到Github里看一下原作者的思想，以上的代码是经过我自己改造的，我并没有使用JPA，而是使用@ResultMap","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"mybatis","slug":"mybatis","permalink":"http://yoursite.com/tags/mybatis/"}]},{"title":"在Java中使用代理","slug":"1511161","date":"2015-11-15T16:00:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2015/11/16/1511161/","link":"","permalink":"http://yoursite.com/2015/11/16/1511161/","excerpt":"","text":"有时候，在需要网络代理的环境下做开发，访问外网的接口时，可以在IDE那配置代理，或者直接在代码中加入以下几下Java代码 12345678910//通知JAVA使用代理连接System.setProperty(\"http.proxySet\", \"true\");//设置服务System.setProperty(\"http.proxyHost\", \"10.101.1.6\");//设置端口System.setProperty(\"http.proxyPort\", \"8080\");//设置用户名System.setProperty(\"http.proxyUserName\", \"username\");//设置密码System.setProperty(\"http.proxyPassword\", \"password\");","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"SpringMVC实现前后端分离","slug":"1511261","date":"2015-11-15T16:00:00.000Z","updated":"2019-01-31T15:37:29.073Z","comments":true,"path":"2015/11/16/1511261/","link":"","permalink":"http://yoursite.com/2015/11/16/1511261/","excerpt":"","text":"最近一直关注着前后端分离的事，前后端分离的好处重点是使用前端路由，页面的性能会有很大的提升，同时也会减少后端的压力，页面跳转可以不需要经过后端。后端只负责提供数据做为展示。网上的案例大多使用nginx做转向，这样的话不得不将项目分成两部分做部署（后端代码、前端页面），维护起来也比较麻烦，所以要把它们都融合在一个项目里。 项目分三部分 静态资源文件请求包括js,css,jpg等等，使用默认的servlet去拦截 12345&lt;servlet-mapping&gt; &lt;servlet-name&gt;default&lt;/servlet-name&gt; &lt;url-pattern&gt;/res/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/tpl/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 使用容器默认的servlet的好处是可以免去在spring-mvc.xml文件配置静态资源的过滤，可以直接由容器访问跳过spring这一层，相对来说效率好更高 前端路由请求前端路由的请求，将会Rewrite重新指向到angularjs的入口文件，以下是主要代码 12345678&lt;filter&gt; &lt;filter-name&gt;urlRewriteFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.kadima.simplex.system.web.filter.UrlRewriteFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;urlRewriteFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/app/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 接下来是过滤器的Java实现 123456789public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; HttpServletRequest request = (HttpServletRequest)servletRequest; String url = request.getServletPath() + (request.getPathInfo() == null ? \"\" : request.getPathInfo()); logger.debug(\"接收到来自&lt; \" + url + \" &gt;的请求\"); if (isStaticRouter(url)) servletRequest.getRequestDispatcher(\"/tpl/index.html\").forward(servletRequest, servletResponse); else filterChain.doFilter(servletRequest, servletResponse);&#125; 获取数据的请求这部分的请求全都带/action前缀开头，由Spring的DispatcherServlet拦截处理 12345&lt;servlet-mapping&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;url-pattern&gt;/action/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Git常用命令","slug":"1511122","date":"2015-11-11T16:00:00.000Z","updated":"2019-01-31T15:37:29.072Z","comments":true,"path":"2015/11/12/1511122/","link":"","permalink":"http://yoursite.com/2015/11/12/1511122/","excerpt":"","text":"以下是git的常用命令 1234567891011121314151617181920212223#生成ssh keyssh-keygen -t rsa -C \"xxx@xxx.xx\"#设置提交的用户名git config user.name \"&lt;用户名&gt;\"git config user.email &lt;邮箱&gt;#克隆远程库git clone &lt;远程库名&gt; &lt;本地库名，可为空&gt;#进入到项目内部初始化项目git init#添加当前目录的所有文件git add .#添加单个文件git add &lt;文件名&gt;#提交到本地库git commit -am \"xxxx\"#添加远程库git remote add &lt;本地库名，与网络上的无关&gt; &lt;地址，ssh或http&gt;#显示最后一次提交的记录git show#情况一，如果目的是将本地文件初始化远程库，而远程库里又不为空则git pull &lt;远程库名&gt; mastergit commit -am \"xxxxx\"git push &lt;远程库名&gt; master","categories":[{"name":"备忘","slug":"备忘","permalink":"http://yoursite.com/categories/备忘/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"让HTML中的文本框中的文字垂直居中","slug":"1511121","date":"2015-11-11T16:00:00.000Z","updated":"2019-01-31T15:37:29.072Z","comments":true,"path":"2015/11/12/1511121/","link":"","permalink":"http://yoursite.com/2015/11/12/1511121/","excerpt":"","text":"当你自己定义了 Text 的 height 属性时，在 Text 中输入的文字都不是垂直居中的，不过你可以添加CSS来控制它，让输入的文字垂直居中，使网页更完美 12345678910111213141516&lt;html&gt;&lt;head&gt;&lt;style type=\"text/css\"&gt; #text &#123; height:20px; vertical-align:middle; line-height:20px; /*line-height must be equal to height*/ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;input type=\"text\" id=\"text\"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 加入 verticla-align、line-height 两个属性后，文本框中的文字就在文本框中垂直居中了，要注意的是 line-height 必须要等于 height 。","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"分页组件核心算法","slug":"1511123","date":"2015-11-11T16:00:00.000Z","updated":"2019-01-31T15:37:29.072Z","comments":true,"path":"2015/11/12/1511123/","link":"","permalink":"http://yoursite.com/2015/11/12/1511123/","excerpt":"","text":"最近学会了AngularJs的指令编写，刚好业余项目的需要，就顺便写了一个简单的分页插件。 以下是分页插件的核心算法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960var calculate = function(pageNum, totalPage) &#123; var pns = []; if (totalPage &lt; 7) &#123; for (var i = 1; i &lt;= totalPage; i++) &#123; pns.push(&#123; num: i, click: pageNum != i &#125;); &#125; &#125; else &#123; var _f = pageNum - 1, _b = totalPage - pageNum; var f = _f &gt; 2 ? 2 : _f, b = _b &gt; 2 ? 2 : _b; if (_f &lt; 2) b += (2 - f); if (_b &lt; 2) f += (2 - b); if (_f &gt; 2) &#123; pns.push(&#123; num: 1, click: true &#125;); &#125; if (_f &gt; 3) &#123; pns.push(&#123; num: '⋅⋅⋅', click: false &#125;); &#125; for (i = f; i &gt; 0; i--) &#123; pns.push(&#123; num: pageNum - i, click: true &#125;); &#125; pns.push(&#123; num: pageNum, click: false &#125;); for (i = 0; i &lt; b; i++) &#123; pns.push(&#123; num: pageNum + i + 1, click: true &#125;); &#125; if (_b &gt; 3) &#123; pns.push(&#123; num: '⋅⋅⋅', click: false &#125;); &#125; if (_b &gt; 2) &#123; pns.push(&#123; num: totalPage, click: true &#125;); &#125; &#125; return pns;&#125;; 这个方法可以计算出分页插件页码的显示范围。举个例子，如果总页数为10的情况。当前页码为6，则会显示[1]..[4][5][6][7][8]..[10]；当页码为9的时候，则会显示[1]..[6][7][8][9][10]，很多种情况都涵盖了。","categories":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/categories/编码/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"}]}]}